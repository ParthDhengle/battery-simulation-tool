import numpy as np

def calculate_parallel_group_currents(cells, I_module, R_p, t, I_cells_matrix, V_parallel_matrix, sim_V_term):
    """
    Calculates the current for each cell in a parallel group and the terminal voltage
    across the parallel group at a given time step t.

    Args:
        cells (list of dict): Cell properties.
        I_module (np.ndarray): Module current over time.
        R_p (float): Interconnect resistance for parallel connections.
        t (int): Current time step (0-based index).
        I_cells_matrix (np.ndarray): Matrix storing cell currents over time.
        V_parallel_matrix (np.ndarray): Matrix storing group terminal voltages over time.
        sim_V_term (np.ndarray): Cell terminal voltages from the 2RC model.

    Returns:
        Updated I_cells_matrix and V_parallel_matrix (in-place).
    """
    # Identify unique parallel groups
    parallel_groups = sorted(set(cell['parallel_group'] for cell in cells))

    for group_id in parallel_groups:
        # Get all cell indices in this parallel group
        group_cells = [idx for idx, cell in enumerate(cells) if cell['parallel_group'] == group_id]
        N = len(group_cells)

        # Skip if no cells in the group
        if N == 0:
            continue

        # Set up A matrix and b vector
        A = np.zeros((N + 1, N + 1))
        b = np.zeros(N + 1)

        for i, cell_idx in enumerate(group_cells):
            cell = cells[cell_idx]

            if t == 0:
                OCV = cell['OCV']
                R0 = cell['R0']
            else:
                OCV = sim_V_term[cell_idx]
                R0 = 0.0  # already included in prior voltage calc

            A[i, i] = R0 + R_p           # Coefficient for I_cell
            A[i, -1] = 1.0               # Coefficient for V_parallel_group
            b[i] = OCV

        # Summation equation: sum(I_cells) = I_module[t]
        A[-1, :N] = 1.0
        b[-1] = I_module[t]

        # Solve Ax = b
        try:
            x = np.linalg.solve(A, b)
        except np.linalg.LinAlgError:
            print(f"Warning: Singular matrix at time step {t}. Setting currents to zero.")
            x = np.zeros(N + 1)

        # Extract results
        V_parallel_group = x[-1]
        for i, cell_idx in enumerate(group_cells):
            I_cells_matrix[cell_idx, t] = x[i]
            V_parallel_matrix[cell_idx, t] = V_parallel_group

    return I_cells_matrix, V_parallel_matrix
