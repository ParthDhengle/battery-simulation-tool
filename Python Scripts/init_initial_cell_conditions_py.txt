import matplotlib.pyplot as plt

def init_initial_cell_conditions(
    cells,
    initial_temperature,
    initial_SOC,
    initial_SOH,
    initial_DCIR_AgingFactor,
    varying_cells=None,
    varying_temps=None,
    varying_SOCs=None,
    varying_SOHs=None,
    varying_DCIRs=None
):
    """
    Initializes temperature, SOC, SOH, and DCIR aging factor for each cell.
    If varying_cells and corresponding lists are provided, assigns specific values to them.

    Args:
        cells (list of dict): Cell geometry and identity data from init_geometry.
        initial_temperature (float): Uniform starting temperature for all cells [K].
        initial_SOC (float): Uniform SOC (0 to 1).
        initial_SOH (float): Uniform SOH (0 to 1).
        initial_DCIR_AgingFactor (float): Uniform DCIR aging factor (e.g., 1.0 = new).
        varying_cells (list of int, optional): Indices of cells with varying values (1-based like MATLAB).
        varying_temps (list of float, optional)
        varying_SOCs (list of float, optional)
        varying_SOHs (list of float, optional)
        varying_DCIRs (list of float, optional)

    Returns:
        Updated list of cells with initial conditions added.
    """

    # Set uniform conditions
    for cell in cells:
        cell['temperature'] = initial_temperature
        cell['SOC'] = initial_SOC
        cell['SOH'] = initial_SOH
        cell['DCIR_AgingFactor'] = initial_DCIR_AgingFactor

    # Apply varying conditions if provided
    if all(v is not None for v in [varying_cells, varying_temps, varying_SOCs, varying_SOHs, varying_DCIRs]):
        if not (len(varying_cells) == len(varying_temps) == len(varying_SOCs) == len(varying_SOHs) == len(varying_DCIRs)):
            raise ValueError("All varying_* lists must be the same length.")

        for idx, cell_idx in enumerate(varying_cells):
            if cell_idx < 1 or cell_idx > len(cells):
                raise IndexError(f"Invalid cell index {cell_idx} specified.")
            cell = cells[cell_idx - 1]  # Convert to 0-based index
            cell['temperature'] = varying_temps[idx]
            cell['SOC'] = varying_SOCs[idx]
            cell['SOH'] = varying_SOHs[idx]
            cell['DCIR_AgingFactor'] = varying_DCIRs[idx]

    # Visualization
    _plot_initial_conditions(cells)

    return cells


def _plot_initial_conditions(cells):
    """Plots cell initial conditions with labels inside circles."""
    fig, ax = plt.subplots()
    ax.set_aspect('equal')
    ax.set_xlabel('X Position (m)')
    ax.set_ylabel('Y Position (m)')
    ax.set_title('Cell Initial Conditions Distribution')

    for cell in cells:
        x, y = cell['position']
        r = cell['radius']
        circle = plt.Circle((x, y), r, edgecolor='blue', facecolor='none')
        ax.add_patch(circle)

        annotation = (
            f"Cell {cell['number']} ({cell['label']})\n"
            f"T: {cell['temperature']:.1f} K\n"
            f"SOC: {cell['SOC']*100:.1f}%\n"
            f"SOH: {cell['SOH']*100:.1f}%\n"
            f"DCIR: {cell['DCIR_AgingFactor']:.2f}"
        )
        ax.text(x, y, annotation, ha='center', va='center', fontsize=10, color='black')

    plt.grid(True)
    plt.show()
