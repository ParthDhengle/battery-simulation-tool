import numpy as np
from scipy.interpolate import RegularGridInterpolator

def get_battery_params(SOC, cell_temp_C, mode, SOH, DCIR_aging_factor, BatteryData_SOH1, BatteryData_SOH2, BatteryData_SOH3):
    """
    Interpolates battery ECM parameters based on SOC, temperature, SOH, and aging.

    Args:
        SOC (float): State of Charge (0 to 1).
        cell_temp_C (float): Cell temperature in Celsius.
        mode (str): 'CHARGE' or 'DISCHARGE'.
        SOH (float): State of Health (0 to 1).
        DCIR_aging_factor (float): Aging scaling for resistances.
        BatteryData_SOH1,2,3 (dict): RC parameter datasets.

    Returns:
        OCV, R0, R1, R2, C1, C2 (floats): Interpolated parameters.
    """

    # --- Select SOH dataset ---
    if SOH >= 0.9:
        BatteryData = BatteryData_SOH1
    elif SOH >= 0.8:
        BatteryData = BatteryData_SOH2
    else:
        BatteryData = BatteryData_SOH3

    # --- Select charge or discharge dataset ---
    if mode.upper() == 'CHARGE':
        Data_Temp = BatteryData['CHARGE']
    elif mode.upper() == 'DISCHARGE':
        Data_Temp = BatteryData['DISCHARGE']
    else:
        raise ValueError('Invalid mode. Use "CHARGE" or "DISCHARGE".')

    # --- Extract temperature datasets ---
    temp_keys = ['T05', 'T15', 'T25', 'T35', 'T45', 'T55']
    temp_vals = [5, 15, 25, 35, 45, 55]
    parameter_grids = []

    for col in range(1, 7):  # Columns 2 to 7 in MATLAB (1-indexed)
        grid = np.stack([Data_Temp[temp][:, col] for temp in temp_keys], axis=1)
        parameter_grids.append(grid)

    SOC_grid = Data_Temp['T05'][:, 0]  # First column = SOC
    Temp_grid = np.array(temp_vals)

    # --- Interpolators ---
    def make_interp(grid):
        return RegularGridInterpolator((SOC_grid, Temp_grid), grid, bounds_error=False, fill_value=None)

    OCV = make_interp(parameter_grids[0])((SOC, cell_temp_C))[()]
    R0  = make_interp(parameter_grids[1])((SOC, cell_temp_C))[()]
    R1  = make_interp(parameter_grids[2])((SOC, cell_temp_C))[()]
    R2  = make_interp(parameter_grids[3])((SOC, cell_temp_C))[()]
    C1  = make_interp(parameter_grids[4])((SOC, cell_temp_C))[()]
    C2  = make_interp(parameter_grids[5])((SOC, cell_temp_C))[()]

    # --- Apply DCIR aging ---
    R0 *= DCIR_aging_factor
    R1 *= DCIR_aging_factor
    R2 *= DCIR_aging_factor

    # --- Safety Warnings ---
    def warn_if_negative(val, name):
        if val < 0:
            print(f"Warning: {name} is negative ({val:.4f}) at SOC={SOC:.4f}, T={cell_temp_C:.2f}°C")

    for val, name in zip([OCV, R0, R1, R2, C1, C2], ['OCV', 'R0', 'R1', 'R2', 'C1', 'C2']):
        warn_if_negative(val, name)

    if OCV < 2.5 or OCV > 4.2:
        print(f"Warning: OCV ({OCV:.4f} V) out of expected range at SOC={SOC:.4f}, T={cell_temp_C:.2f}°C")

    return OCV, R0, R1, R2, C1, C2
