clear
clc

% Add required paths for required files
addpath('C:\Data\Projects\05_Other\Battery Sim\ECM Matlab\Module Level Model 2\Functions');                       % Function files
addpath('C:\Data\Projects\05_Other\Battery Sim\ECM Matlab\Module Level Model 2\Battery Parameter Dataset')        % RC Parameter dataset
addpath('C:\Data\Projects\05_Other\Battery Sim\ECM Matlab\Module Level Model 2\Drive Cycle');                     % Drive cycle data
addpath('C:\Data\Projects\05_Other\Battery Sim\ECM Matlab\Module Level Model 2\Lumped Heat Capacitance Model')    % Lumped heat capacitance model

Geometry Initiation
% Define the geometry of the module and cell specifications
N_cells = 9;                                           % Number of cells
cell_radius = 0.0105;                                   % Cell radius in meters
cell_height = 0.07;                                     % Cell height in meters
N_rows = 3;                                             % Number of rows
N_cols = 3;                                             % Number of columns
row_distance = 0.023;                                   % Distance between cell centers in rows (meters)
col_distance = 0.023;                                   % Distance between cell centers in columns (meters)
grid_type = 'rectangular';                              % Grid type
capacity = 5;                                           % Cell capacity in Ah
columbicEfficiency = 1;                                 % Coulombic efficiency (only used in charging)
connection_type = 'row_series_column_parallel';         % Options - row_series_column_parallel/ row_parallel_column_series
R_p = 0.001;                                            % Cell parallel interconnect resistance (ohm)
R_s = 0.001;                                            % Cell series interconnect resistance (ohm)
cell_voltage_upper_limit = 4.5;                         % Upper voltage threshold for a cell (V)
cell_voltage_lower_limit = NaN;                         % Lower voltage threshold for a cell (V)
module_voltage_upper_limit = 60;                        % Upper voltage threshold for the module (V)
module_voltage_lower_limit = NaN;                       % Lower voltage threshold for the module (V)
m_cell = 0.06725;                                       % mass of cell (Kg)
m_jellyroll = 0.05708;                                  % mass of jellyroll (Kg)

% Initialize cell geometry
cells = init_geometry(N_cells, cell_radius, cell_height, N_rows, N_cols, row_distance, col_distance, grid_type);

Classify Cells
cells = init_classify_cells(cells, N_rows, N_cols);

All cell same initialization
% Define uniform initial conditions for all cells
initial_temperature = 300;   % Initial temperature for all cells (in Kelvin)
initial_SOC = 1;          % Initial SOC for all cells (80%)
initial_SOH = 1;          % Initial SOH for all cells (95%)
initial_DCIR_AgingFactor = 1.0; % Initial DCIR aging factor (no aging, 1.0 means 100% resistance)

% Initialize the initial conditions with uniform values
% cells = init_initial_cell_conditions(cells, initial_temperature, initial_SOC, initial_SOH, initial_DCIR_AgingFactor);

Variable Initialization

% Specify varying conditions for some cells (for example, cells 2 and 4)
varying_cells = [1];            % Cell indices where initial conditions will vary
varying_temps = [300];        % Specific temperatures for selected cells (K)
varying_SOCs =  [1];       % Specific SOCs for selected cells
varying_SOHs = [0.95];       %[0.999539908992615,	0.998913488312767,	1.00143643032624,	1.00140786368487,	0.996108040372040,	0.999864769167117,	0.999258044413559,	1.00282468279388,	1.00491969551068,	1.00499172983926,	0.996113562301051,	1.00034811591009];       % Specific SOHs for selected cells
varying_DCIRs = [1.04];       %[0.964183547213345,	0.967151728126141,	0.999797944820951,	1.04521259409440,	0.977294855544266,	1.01095567497642,	0.993345260132998,	1.03296200609503,	0.967872603295959,	1.00096044519287,	1.01629954712281,	1.03246800142749];      % Specific DCIR aging factors for selected cells (5% and 10% increase)

% Initialize the initial conditions with varying values for selected cells
cells = init_initial_cell_conditions(cells, initial_temperature, initial_SOC, initial_SOH, initial_DCIR_AgingFactor, varying_cells, varying_temps, varying_SOCs, varying_SOHs, varying_DCIRs);

Load Cell Electrical Model Database
load('BatteryData_SOH1.mat');
load('BatteryData_SOH2.mat');
load('BatteryData_SOH3.mat');

Load Drive cycle
% User-specified interval for saving temperature history
save_interval = 100; % Save temperatures every specified time steps

% Load drive cycle
% DriveCycle = readmatrix('Test04_module.xlsx'); 
% DriveCycle = readmatrix('simulation_results_T25_05DCH_25Pulses_2Cells.xlsx'); 
% DriveCycle = readmatrix('7_HWFET_25deg_2Cells.xlsx');
DriveCycle = readmatrix('drive_cycle_generac.xlsx');
% DriveCycle = readmatrix('drive_cycle1_v2.csv'); 
% DriveCycle = readmatrix('9_US06_25deg_raw.csv'); 

% Convert text to double precision
time = DriveCycle(:, 1);                % Convert Column 1: Time
I_module = DriveCycle(:, 3);            % Convert Column 3: Current
V_term_test = DriveCycle(:, 2);         % Convert Column 2: Voltage

num_repeats = 1; % Number of times to repeat the drive cycle


% Initialize repeated arrays
repeated_time = [];
repeated_current = [];

% Get the duration of one cycle
cycle_duration = time(end);

% Repeat the drive cycle
for i = 0:(num_repeats - 1)
    repeated_time = [repeated_time; time + i * cycle_duration];
    repeated_current = [repeated_current; I_module];
end

time = repeated_time;                   % Convert Column 1: Time
I_module = repeated_current;            % Convert Column 3: Current

% Total number of time steps based on the drive cycle
time_steps = length(time);

figure
plot(time,I_module)
xlabel('Time (seconds)');
ylabel('Module Current (A)');
title('Drive Cycle Current');

run("Electrical_Solver.m");